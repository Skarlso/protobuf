// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	plugin.proto

It has these top-level messages:
	Job
	Question
	JobResult
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Job represents a single job
type Job struct {
	UniqueId    uint32            `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	Title       string            `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Priority    int64             `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
	Args        map[string]string `protobuf:"bytes,5,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Question    *Question         `protobuf:"bytes,6,opt,name=question" json:"question,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto1.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Job) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *Job) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Job) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Job) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Job) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Job) GetQuestion() *Question {
	if m != nil {
		return m.Question
	}
	return nil
}

// Question represents a manual question
type Question struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Answer      string `protobuf:"bytes,3,opt,name=answer" json:"answer,omitempty"`
}

func (m *Question) Reset()                    { *m = Question{} }
func (m *Question) String() string            { return proto1.CompactTextString(m) }
func (*Question) ProtoMessage()               {}
func (*Question) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Question) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Question) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Question) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

// JobResult represents the result of an executed job
type JobResult struct {
	UniqueId     uint32 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	Failed       bool   `protobuf:"varint,2,opt,name=failed" json:"failed,omitempty"`
	ExitPipeline bool   `protobuf:"varint,3,opt,name=exit_pipeline,json=exitPipeline" json:"exit_pipeline,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *JobResult) Reset()                    { *m = JobResult{} }
func (m *JobResult) String() string            { return proto1.CompactTextString(m) }
func (*JobResult) ProtoMessage()               {}
func (*JobResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobResult) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *JobResult) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *JobResult) GetExitPipeline() bool {
	if m != nil {
		return m.ExitPipeline
	}
	return false
}

func (m *JobResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Empty message
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*Job)(nil), "proto.Job")
	proto1.RegisterType((*Question)(nil), "proto.Question")
	proto1.RegisterType((*JobResult)(nil), "proto.JobResult")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Plugin service

type PluginClient interface {
	// GetJobs returns a stream of Job objects.
	// Used to expose jobs to gaia.
	GetJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Plugin_GetJobsClient, error)
	// ExecuteJob signals the plugin to execute the given job.
	// Used to execute one job from a pipeline.
	ExecuteJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobResult, error)
}

type pluginClient struct {
	cc *grpc.ClientConn
}

func NewPluginClient(cc *grpc.ClientConn) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) GetJobs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Plugin_GetJobsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plugin_serviceDesc.Streams[0], c.cc, "/proto.Plugin/GetJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginGetJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Plugin_GetJobsClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type pluginGetJobsClient struct {
	grpc.ClientStream
}

func (x *pluginGetJobsClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginClient) ExecuteJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobResult, error) {
	out := new(JobResult)
	err := grpc.Invoke(ctx, "/proto.Plugin/ExecuteJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Plugin service

type PluginServer interface {
	// GetJobs returns a stream of Job objects.
	// Used to expose jobs to gaia.
	GetJobs(*Empty, Plugin_GetJobsServer) error
	// ExecuteJob signals the plugin to execute the given job.
	// Used to execute one job from a pipeline.
	ExecuteJob(context.Context, *Job) (*JobResult, error)
}

func RegisterPluginServer(s *grpc.Server, srv PluginServer) {
	s.RegisterService(&_Plugin_serviceDesc, srv)
}

func _Plugin_GetJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServer).GetJobs(m, &pluginGetJobsServer{stream})
}

type Plugin_GetJobsServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type pluginGetJobsServer struct {
	grpc.ServerStream
}

func (x *pluginGetJobsServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _Plugin_ExecuteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ExecuteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/ExecuteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ExecuteJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

var _Plugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteJob",
			Handler:    _Plugin_ExecuteJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobs",
			Handler:       _Plugin_GetJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

func init() { proto1.RegisterFile("plugin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x41, 0xab, 0x9b, 0x40,
	0x10, 0x66, 0x63, 0x34, 0x3a, 0xc9, 0xa3, 0x8f, 0xe5, 0xf1, 0x10, 0x7b, 0x11, 0x4b, 0x41, 0x5a,
	0x08, 0x25, 0x3d, 0xb4, 0xf4, 0xd6, 0x43, 0x28, 0xf5, 0x94, 0xee, 0xa9, 0xd0, 0x43, 0xd0, 0x38,
	0x95, 0xa5, 0xc6, 0xdd, 0xec, 0xae, 0x6d, 0x3c, 0xf5, 0xd6, 0xdf, 0x5d, 0x5c, 0x8d, 0x09, 0x2d,
	0xbc, 0x93, 0xf3, 0x7d, 0xf3, 0x39, 0xe3, 0xf7, 0x39, 0xb0, 0x92, 0x75, 0x5b, 0xf1, 0x66, 0x2d,
	0x95, 0x30, 0x82, 0xba, 0xf6, 0x91, 0xfc, 0x99, 0x81, 0x93, 0x89, 0x82, 0x3e, 0x87, 0xa0, 0x6d,
	0xf8, 0xa9, 0xc5, 0x3d, 0x2f, 0x43, 0x12, 0x93, 0xf4, 0x8e, 0xf9, 0x03, 0xf1, 0xb9, 0xa4, 0x0f,
	0xe0, 0x1a, 0x6e, 0x6a, 0x0c, 0x67, 0x31, 0x49, 0x03, 0x36, 0x00, 0x1a, 0xc3, 0xb2, 0x44, 0x7d,
	0x50, 0x5c, 0x1a, 0x2e, 0x9a, 0xd0, 0xb1, 0xbd, 0x5b, 0x8a, 0x46, 0xe0, 0x4b, 0xc5, 0x85, 0xe2,
	0xa6, 0x0b, 0xe7, 0x31, 0x49, 0x1d, 0x36, 0x61, 0x9a, 0xc2, 0x3c, 0x57, 0x95, 0x0e, 0xdd, 0xd8,
	0x49, 0x97, 0x9b, 0x87, 0xe1, 0xab, 0xd6, 0x99, 0x28, 0xd6, 0x1f, 0x55, 0xa5, 0xb7, 0x8d, 0x51,
	0x1d, 0xb3, 0x0a, 0xfa, 0x1a, 0xfc, 0x53, 0x8b, 0xda, 0x2e, 0xf1, 0x62, 0x92, 0x2e, 0x37, 0xcf,
	0x46, 0xf5, 0x97, 0x91, 0x66, 0x93, 0x20, 0x7a, 0x07, 0xc1, 0xf4, 0x3e, 0xbd, 0x07, 0xe7, 0x07,
	0x76, 0xd6, 0x4e, 0xc0, 0xfa, 0xb2, 0x77, 0xf2, 0x33, 0xaf, 0xdb, 0xc9, 0x89, 0x05, 0x1f, 0x66,
	0xef, 0x49, 0xf2, 0x15, 0xfc, 0xcb, 0xb8, 0x7f, 0x9d, 0x91, 0xff, 0x9d, 0x51, 0x98, 0x9b, 0x4e,
	0x5e, 0xc6, 0xd8, 0x9a, 0x3e, 0x82, 0x97, 0x37, 0xfa, 0x17, 0xaa, 0x31, 0x8a, 0x11, 0x25, 0xbf,
	0x21, 0xc8, 0x44, 0xc1, 0x50, 0xb7, 0xb5, 0x79, 0x3a, 0xe7, 0x47, 0xf0, 0xbe, 0xe7, 0xbc, 0xc6,
	0xd2, 0xce, 0xf5, 0xd9, 0x88, 0xe8, 0x0b, 0xb8, 0xc3, 0x33, 0x37, 0x7b, 0xc9, 0x25, 0xd6, 0xbc,
	0x41, 0xbb, 0xc0, 0x67, 0xab, 0x9e, 0xdc, 0x8d, 0x1c, 0x0d, 0x61, 0x71, 0x44, 0xad, 0xf3, 0x0a,
	0x6d, 0xd6, 0x01, 0xbb, 0xc0, 0x64, 0x01, 0xee, 0xf6, 0x28, 0x4d, 0xb7, 0xf9, 0x06, 0xde, 0xce,
	0xde, 0x00, 0x7d, 0x09, 0x8b, 0x4f, 0x68, 0x32, 0x51, 0x68, 0xba, 0x1a, 0xc3, 0xb4, 0x92, 0x08,
	0xae, 0x3f, 0xe2, 0x0d, 0xa1, 0xaf, 0x00, 0xb6, 0x67, 0x3c, 0xb4, 0x06, 0xfb, 0x1b, 0xb9, 0xe9,
	0x45, 0xf7, 0xd7, 0x7a, 0x70, 0x56, 0x78, 0x96, 0x78, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0x7b,
	0x37, 0x41, 0x43, 0x67, 0x02, 0x00, 0x00,
}
